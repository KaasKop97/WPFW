Generated by: https://github.com/KaasKop97/source_extraction

Filename: Startup.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.HttpsPolicy;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Studenten.Data;

namespace Studenten
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddControllersWithViews();
            services.AddDbContext<ApplicationDbContext>();
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                app.UseExceptionHandler("/Home/Error");
                // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
                app.UseHsts();
            }

            app.UseHttpsRedirection();
            app.UseStaticFiles();

            app.UseRouting();

            app.UseAuthorization();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllerRoute(
                    name: "default",
                    pattern: "{controller=Home}/{action=Index}/{id?}");
            });
        }
    }
}

Generated by: https://github.com/KaasKop97/source_extraction

Filename: Program.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;

namespace Studenten
{
    public class Program
    {
        public static void Main(string[] args)
        {
            CreateHostBuilder(args).Build().Run();
        }

        public static IHostBuilder CreateHostBuilder(string[] args) =>
            Host.CreateDefaultBuilder(args)
                .ConfigureWebHostDefaults(webBuilder => { webBuilder.UseStartup<Startup>(); });
    }
}

Generated by: https://github.com/KaasKop97/source_extraction

Filename: HomeController.cs

ï»¿using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Studenten.Models;

namespace Studenten.Controllers
{
    public class HomeController : Controller
    {
        private readonly ILogger<HomeController> _logger;

        public HomeController(ILogger<HomeController> logger)
        {
            _logger = logger;
        }

        public IActionResult Index()
        {
            return View();
        }

        public IActionResult Privacy()
        {
            return View();
        }

        [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
        public IActionResult Error()
        {
            return View(new ErrorViewModel {RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier});
        }
    }
}

Generated by: https://github.com/KaasKop97/source_extraction

Filename: StudentController.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.AspNetCore.Mvc;
using Studenten.Data;
using Studenten.Models;

namespace Studenten.Controllers
{
    public class StudentController : Controller
    {
        private readonly ApplicationDbContext _context;

        public StudentController(ApplicationDbContext context)
        {
            _context = context;
        }

        public IActionResult Index()
        {
            return View(_context.Studenten.ToList());
        }

        public IActionResult Edit(int id)
        {
            // Wait why am I iterating here oops...
            // Anyways this is to get the student we wanna edit.
            foreach (var student in _context.Studenten.Where(student => student.StudentNummer == id))
            {
                ViewBag.student = student;
                return View();
            }

            return View();
        }

        [HttpPost]
        public IActionResult Edit(Student student)
        {
            // Post request of the edited student.
            // Here we get the old student
            var oldRow = _context.Studenten.Single(s => s.Id == student.Id);
            // Update its values
            oldRow.StudentMail = student.StudentMail;
            oldRow.StudentNaam = student.StudentNaam;
            oldRow.StudentNummer = student.StudentNummer;
            oldRow.StudentPhonenr = student.StudentPhonenr;
            oldRow.StudentAge = student.StudentAge;
            oldRow.StudentGrade = student.StudentGrade;
            // Saving it to the database.
            _context.SaveChanges();
            return RedirectToAction("Index");
        }

        public string Aantal(string naam)
        {
            int aantal = 0;
            // Get list of students and count number of occurences in the list.
            foreach (var student in _context.Studenten.ToList())
            {
                if (student.StudentNaam == naam)
                {
                    aantal++;
                }
            }

            return "De naam " + naam + " komt " + aantal + " keer voor in de lijst.";
        }

        public IActionResult Email(int id)
        {
            // id is the students id
            foreach (var student in _context.Studenten.ToList())
            {
                // Checking if student exists with email address
                if (student.StudentNummer == id)
                {
                    ViewData["Email_message"] = "Student bestaat met mail adres: " + student.StudentMail;
                    break;
                }
                else
                {
                    ViewData["Email_message"] = "Student bestaat niet met met nummer: " + id.ToString();
                }
            }

            return View();
        }

        // I call it an ID because then ASP.net handles it automatically.
        public IActionResult ZoekStudent(string id)
        {
            // We set the letter in the viewdata so view can display it (EXTRA "CHALLENGE" :P)
            ViewData["searchedLetter"] = id;
            // Get the student as a list then search in that list for name startswith() upper and lowercase.
            List<Student> tempStudentList = _context.Studenten.ToList().Where(student =>
                student.StudentNaam.StartsWith(id.ToUpper()) || student.StudentNaam.StartsWith(id.ToLower())).ToList();
            if (tempStudentList.Count > 0)
            {
                // Nice we found at least one student with that letter.
                return View(tempStudentList);
            }

            // Rip sending empty result
            return new EmptyResult();
        }

        //Work damn it
        public String TopStudents()
        {
            StringBuilder temp = new StringBuilder();
            temp.Append("Top 3 studenten: ");
            //Orders grades from highest to lowest, selects name and takes first 3 students (i think, it's supposed to anyway..)
            var list = _context.Studenten.OrderByDescending(x => x.StudentGrade).Take(3).ToList();
            foreach (var student in list)
            {
                temp.Append(" " + student.StudentNaam + " ");
            }

            Console.WriteLine(temp);
            return temp.ToString();
        }

        public IActionResult CreateStudent()
        {
            return View();
        }

        // [HttpPost]
        // public IActionResult CreateStudent(string studentNaam, int studentNummer, string studentMail, int StudentPhonenr, int StudentAge, double StudentGrade)
        // {
        //     // Create the new student, add it to the context and save the changes.
        //     var newStudent = new Student
        //     {
        //         StudentMail = studentMail, StudentNaam = studentNaam, StudentNummer = studentNummer,
        //         StudentPhonenr = StudentPhonenr, StudentAge = StudentAge, StudentGrade = StudentGrade
        //     };
        //     _context.Studenten.Add(newStudent);
        //     _context.SaveChanges();
        //     return RedirectToAction("Index");
        // }
        [HttpPost]
        public IActionResult CreateStudent(Student student)
        {
            // Create the new student, add it to the context and save the changes.
            if (!ModelState.IsValid)
            {
                //Send em back where they belong since they did it wrong.
                return RedirectToAction("CreateStudent");
            }
            _context.Studenten.Add(student);
            _context.SaveChanges();
            return RedirectToAction("Index");
        }
    }
}

Generated by: https://github.com/KaasKop97/source_extraction

Filename: ErrorViewModel.cs

using System;

namespace Studenten.Models
{
    public class ErrorViewModel
    {
        public string RequestId { get; set; }

        public bool ShowRequestId => !string.IsNullOrEmpty(RequestId);
    }
}

Generated by: https://github.com/KaasKop97/source_extraction

Filename: Student.cs

using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.EntityFrameworkCore.Metadata.Internal;

namespace Studenten.Models
{
    public class Student : Model
    {
        public int Id { get; set; }
        [Required]
        [Range(3000, 1000000, ErrorMessage = "Dat is geen studentnummer.")]
        public int StudentNummer { get; set; }
        [Required]
        public string StudentNaam { get; set; }
        [Required]
        public string StudentMail { get; set; }
        [Required]
        [Range(0600000000, 0699999999)]
        public int StudentPhonenr { get; set; }
        [Range(0, 99, ErrorMessage = "Das best wel oud niet?")]
        public int StudentAge { get; set; }
        public double StudentGrade { get; set; }
        List<Student> Vrienden;
    }
}

Generated by: https://github.com/KaasKop97/source_extraction

Filename: ApplicationDbContext.cs

using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Studenten.Models;

namespace Studenten.Data
{
    public class ApplicationDbContext : DbContext
    {
        public DbSet<Student> Studenten { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder.UseSqlite(
                "Data Source=/home/mitch/Projects/School/Jaar 2/WPFW/Week_5/5B/5B/Studenten/Studenten/Studenten.db");
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Student>().HasData(
                new Student()
                {
                    Id = 1, StudentMail = "10000@student.hhs.nl", StudentNaam = "Jan", StudentNummer = 10000,
                    StudentPhonenr = 06123, StudentAge = 21, StudentGrade = 5.5
                },
                new Student()
                {
                    Id = 2, StudentMail = "20000@student.hhs.nl", StudentNaam = "Kees", StudentNummer = 20000,
                    StudentPhonenr = 06234, StudentAge = 17, StudentGrade = 7.2
                },
                new Student()
                {
                    Id = 3, StudentMail = "30000@student.hhs.nl", StudentNaam = "Pieter", StudentNummer = 30000,
                    StudentPhonenr = 06345, StudentAge = 18, StudentGrade = 8.8
                },
                new Student()
                {
                    Id = 4, StudentMail = "40000@student.hhs.nl", StudentNaam = "Jan", StudentNummer = 40000,
                    StudentPhonenr = 06456, StudentAge = 24, StudentGrade = 6.5
                },
                new Student()
                {
                    Id = 5, StudentMail = "50000@student.hhs.nl", StudentNaam = "Jeroen", StudentNummer = 50000,
                    StudentPhonenr = 06567, StudentAge = 20, StudentGrade = 4.3
                }
            );
        }
    }
}

Generated by: https://github.com/KaasKop97/source_extraction

Filename: 20201127211516_InitialDb.cs

ï»¿using Microsoft.EntityFrameworkCore.Migrations;

namespace Studenten.Migrations
{
    public partial class InitialDb : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "Studenten",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    StudentNummer = table.Column<int>(nullable: false),
                    StudentNaam = table.Column<string>(nullable: true),
                    StudentMail = table.Column<string>(nullable: true),
                    StudentPhonenr = table.Column<int>(nullable: false),
                    StudentAge = table.Column<int>(nullable: false),
                    StudentGrade = table.Column<double>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Studenten", x => x.Id);
                });

            migrationBuilder.InsertData(
                table: "Studenten",
                columns: new[] { "Id", "StudentAge", "StudentGrade", "StudentMail", "StudentNaam", "StudentNummer", "StudentPhonenr" },
                values: new object[] { 1, 21, 5.5, "10000@student.hhs.nl", "Jan", 10000, 6123 });

            migrationBuilder.InsertData(
                table: "Studenten",
                columns: new[] { "Id", "StudentAge", "StudentGrade", "StudentMail", "StudentNaam", "StudentNummer", "StudentPhonenr" },
                values: new object[] { 2, 17, 7.2000000000000002, "20000@student.hhs.nl", "Kees", 20000, 6234 });

            migrationBuilder.InsertData(
                table: "Studenten",
                columns: new[] { "Id", "StudentAge", "StudentGrade", "StudentMail", "StudentNaam", "StudentNummer", "StudentPhonenr" },
                values: new object[] { 3, 18, 8.8000000000000007, "30000@student.hhs.nl", "Pieter", 30000, 6345 });

            migrationBuilder.InsertData(
                table: "Studenten",
                columns: new[] { "Id", "StudentAge", "StudentGrade", "StudentMail", "StudentNaam", "StudentNummer", "StudentPhonenr" },
                values: new object[] { 4, 24, 6.5, "40000@student.hhs.nl", "Jan", 40000, 6456 });

            migrationBuilder.InsertData(
                table: "Studenten",
                columns: new[] { "Id", "StudentAge", "StudentGrade", "StudentMail", "StudentNaam", "StudentNummer", "StudentPhonenr" },
                values: new object[] { 5, 20, 4.2999999999999998, "50000@student.hhs.nl", "Jeroen", 50000, 6567 });
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "Studenten");
        }
    }
}


Generated by: https://github.com/KaasKop97/source_extraction

Filename: 20201127211516_InitialDb.Designer.cs

ï»¿// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Studenten.Data;

namespace Studenten.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20201127211516_InitialDb")]
    partial class InitialDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10");

            modelBuilder.Entity("Studenten.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("StudentAge")
                        .HasColumnType("INTEGER");

                    b.Property<double>("StudentGrade")
                        .HasColumnType("REAL");

                    b.Property<string>("StudentMail")
                        .HasColumnType("TEXT");

                    b.Property<string>("StudentNaam")
                        .HasColumnType("TEXT");

                    b.Property<int>("StudentNummer")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StudentPhonenr")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Studenten");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            StudentAge = 21,
                            StudentGrade = 5.5,
                            StudentMail = "10000@student.hhs.nl",
                            StudentNaam = "Jan",
                            StudentNummer = 10000,
                            StudentPhonenr = 6123
                        },
                        new
                        {
                            Id = 2,
                            StudentAge = 17,
                            StudentGrade = 7.2000000000000002,
                            StudentMail = "20000@student.hhs.nl",
                            StudentNaam = "Kees",
                            StudentNummer = 20000,
                            StudentPhonenr = 6234
                        },
                        new
                        {
                            Id = 3,
                            StudentAge = 18,
                            StudentGrade = 8.8000000000000007,
                            StudentMail = "30000@student.hhs.nl",
                            StudentNaam = "Pieter",
                            StudentNummer = 30000,
                            StudentPhonenr = 6345
                        },
                        new
                        {
                            Id = 4,
                            StudentAge = 24,
                            StudentGrade = 6.5,
                            StudentMail = "40000@student.hhs.nl",
                            StudentNaam = "Jan",
                            StudentNummer = 40000,
                            StudentPhonenr = 6456
                        },
                        new
                        {
                            Id = 5,
                            StudentAge = 20,
                            StudentGrade = 4.2999999999999998,
                            StudentMail = "50000@student.hhs.nl",
                            StudentNaam = "Jeroen",
                            StudentNummer = 50000,
                            StudentPhonenr = 6567
                        });
                });
#pragma warning restore 612, 618
        }
    }
}


Generated by: https://github.com/KaasKop97/source_extraction

Filename: ApplicationDbContextModelSnapshot.cs

ï»¿// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Studenten.Data;

namespace Studenten.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10");

            modelBuilder.Entity("Studenten.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("StudentAge")
                        .HasColumnType("INTEGER");

                    b.Property<double>("StudentGrade")
                        .HasColumnType("REAL");

                    b.Property<string>("StudentMail")
                        .HasColumnType("TEXT");

                    b.Property<string>("StudentNaam")
                        .HasColumnType("TEXT");

                    b.Property<int>("StudentNummer")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StudentPhonenr")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Studenten");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            StudentAge = 21,
                            StudentGrade = 5.5,
                            StudentMail = "10000@student.hhs.nl",
                            StudentNaam = "Jan",
                            StudentNummer = 10000,
                            StudentPhonenr = 6123
                        },
                        new
                        {
                            Id = 2,
                            StudentAge = 17,
                            StudentGrade = 7.2000000000000002,
                            StudentMail = "20000@student.hhs.nl",
                            StudentNaam = "Kees",
                            StudentNummer = 20000,
                            StudentPhonenr = 6234
                        },
                        new
                        {
                            Id = 3,
                            StudentAge = 18,
                            StudentGrade = 8.8000000000000007,
                            StudentMail = "30000@student.hhs.nl",
                            StudentNaam = "Pieter",
                            StudentNummer = 30000,
                            StudentPhonenr = 6345
                        },
                        new
                        {
                            Id = 4,
                            StudentAge = 24,
                            StudentGrade = 6.5,
                            StudentMail = "40000@student.hhs.nl",
                            StudentNaam = "Jan",
                            StudentNummer = 40000,
                            StudentPhonenr = 6456
                        },
                        new
                        {
                            Id = 5,
                            StudentAge = 20,
                            StudentGrade = 4.2999999999999998,
                            StudentMail = "50000@student.hhs.nl",
                            StudentNaam = "Jeroen",
                            StudentNummer = 50000,
                            StudentPhonenr = 6567
                        });
                });
#pragma warning restore 612, 618
        }
    }
}


