Generated by: https://github.com/KaasKop97/source_extraction
Filename: Startup.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.HttpsPolicy;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Studenten.Data;

namespace Studenten
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddControllersWithViews();
            services.AddDbContext<ApplicationDbContext>(
                options => options.UseSqlite(
                    "Data Source=/home/mitch/Projects/School/Jaar 2/WPFW/Week_5/5A/Studenten/Studenten/student.db")
            );
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                app.UseExceptionHandler("/Home/Error");
                // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
                app.UseHsts();
            }

            app.UseHttpsRedirection();
            app.UseStaticFiles();

            app.UseRouting();

            app.UseAuthorization();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllerRoute(
                    name: "default",
                    pattern: "{controller=Home}/{action=Index}/{id?}");
            });
        }
    }
}

Filename: Program.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;

namespace Studenten
{
    public class Program
    {
        public static void Main(string[] args)
        {
            CreateHostBuilder(args).Build().Run();
        }

        public static IHostBuilder CreateHostBuilder(string[] args) =>
            Host.CreateDefaultBuilder(args)
                .ConfigureWebHostDefaults(webBuilder => { webBuilder.UseStartup<Startup>(); });
    }
}

Filename: HomeController.cs

﻿using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Studenten.Models;

namespace Studenten.Controllers
{
    public class HomeController : Controller
    {
        private readonly ILogger<HomeController> _logger;

        public HomeController(ILogger<HomeController> logger)
        {
            _logger = logger;
        }

        public IActionResult Index()
        {
            return View();
        }

        public IActionResult Privacy()
        {
            return View();
        }

        [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
        public IActionResult Error()
        {
            return View(new ErrorViewModel {RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier});
        }
    }
}

Filename: StudentController.cs

using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.AspNetCore.Mvc;
using Studenten.Data;
using Studenten.Models;

namespace Studenten.Controllers
{
    public class StudentController : Controller
    {
        private readonly ApplicationDbContext _context;

        public StudentController(ApplicationDbContext context)
        {
            _context = context;
        }

        public IActionResult Index()
        {
            return View(_context.Studenten.ToList());
        }

        public IActionResult Edit(int id)
        {
            foreach (var student in _context.Studenten.Where(student => student.StudentNummer == id))
            {
                ViewBag.student = student;
                return View();
            }
            return View();
        }

        [HttpPost]
        public IActionResult Edit(Student student)
        {
            var oldRow = _context.Studenten.Single(s => s.Id == student.Id);
            oldRow.StudentMail = student.StudentMail;
            oldRow.StudentNaam = student.StudentNaam;
            oldRow.StudentNummer = student.StudentNummer;
            _context.SaveChanges();
            return RedirectToAction("Index");
        }    

        public string Aantal(string naam)
        {
            int aantal = 0;

            foreach (var student in _context.Studenten.ToList())
            {
                if (student.StudentNaam == naam)
                {
                    aantal++;
                }
            }

            return "De naam " + naam + " komt " + aantal + " keer voor in de lijst.";
        }

        public IActionResult Email(int id)
        {
            // id is the students id
            foreach (var student in _context.Studenten.ToList())
            {
                Console.WriteLine(student.StudentNummer);
                Console.WriteLine(id);
                if (student.StudentNummer == id)
                {
                    ViewData["Email_message"] = "Student bestaat met mail adres: " + student.StudentMail;
                    break;
                }
                else
                {
                    ViewData["Email_message"] = "Student bestaat niet met met nummer: " + id.ToString();
                }
            }

            return View();
        }

        // I call it an ID because then ASP.net handles it automatically.
        public IActionResult ZoekStudent(string id)
        {
            ViewData["searchedLetter"] = id;
            List<Student> tempStudentList = _context.Studenten.ToList().Where(student => student.StudentNaam.StartsWith(id.ToUpper()) || student.StudentNaam.StartsWith(id.ToLower())).ToList();
            if (tempStudentList.Count > 0)
            {
                return View(tempStudentList);    
            }
            return new EmptyResult();

        }

        public IActionResult CreateStudent()
        {
            return View();
        }

        [HttpPost]
        public IActionResult CreateStudent(string studentNaam, int studentNummer, string studentMail)
        {
            var newStudent = new Student
            {
                StudentMail = studentMail, StudentNaam = studentNaam, StudentNummer = studentNummer
            };
            _context.Studenten.Add(newStudent);
            _context.SaveChanges();
            return RedirectToAction("Index");
        }
    }
}

Filename: ErrorViewModel.cs

using System;

namespace Studenten.Models
{
    public class ErrorViewModel
    {
        public string RequestId { get; set; }

        public bool ShowRequestId => !string.IsNullOrEmpty(RequestId);
    }
}

Filename: Student.cs

namespace Studenten.Models
{
    public class Student
    {
        public int Id { get; set; }
        public int StudentNummer { get; set; }
        public string StudentNaam { get; set; }
        public string StudentMail { get; set; }
    }
}

Filename: ApplicationDbContext.cs

using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Studenten.Models;

namespace Studenten.Data
{
    public class ApplicationDbContext : DbContext
    {
        public DbSet<Student> Studenten { get; set; }
        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options)
        {
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Student>().HasData(
                new Student() {Id = 1, StudentMail = "10000@student.hhs.nl", StudentNaam = "Jan", StudentNummer = 10000},
                new Student() {Id = 2, StudentMail = "20000@student.hhs.nl", StudentNaam = "Kees", StudentNummer = 20000},
                new Student() {Id = 3, StudentMail = "30000@student.hhs.nl", StudentNaam = "Pieter", StudentNummer = 30000},
                new Student() {Id = 4, StudentMail = "40000@student.hhs.nl", StudentNaam = "Jan", StudentNummer = 40000},
                new Student() {Id = 5, StudentMail = "50000@student.hhs.nl", StudentNaam = "Jeroen", StudentNummer = 50000}
            );
        }
    }
}

Filename: Tests.cs

﻿using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Studenten.Controllers;
using Studenten.Data;
using Studenten.Models;
using Tests.Helper;
using Xunit;

namespace Tests
{
    public class Tests
    {
        public string databaseName;

        [Fact]
        public void TestIndex()
        {
            var test = new StudentController(GetNewInMemoryDatabase(true));
            var result = test.Index();
            Assert.IsType<ViewResult>(result);
        }

        [Fact]
        public void TestNewStudent()
        {
            var test = new StudentController(GetInMemoryDbWithData());
            var testNewStudent = test.CreateStudent("Pietje puk", 1068, "1068@student.hhs.nl");
            Assert.IsType<RedirectToActionResult>(testNewStudent);
        }

        [Fact]
        public void TestZoekStudent()
        {
            var test = new StudentController(GetInMemoryDbWithData());
            var result = test.ZoekStudent("J");
            Assert.IsType<ViewResult>(result);
            var wrongResult = test.ZoekStudent("Z");
            Assert.IsType<EmptyResult>(wrongResult);
        }

        [Fact]
        public void AantalStudenten()
        {
            var test = new StudentController(GetInMemoryDbWithData());
            var result = test.Aantal("Jan");
            Assert.Equal("De naam Jan komt 2 keer voor in de lijst.", result);
            var wrongResult = test.Aantal("Zulu");
            Assert.Equal("De naam Zulu komt 0 keer voor in de lijst.", wrongResult);
        }

        [Fact]
        public void EditStudenten()
        {
            var db = GetInMemoryDbWithData();
            var test = new StudentController(db);

            var editStudent = db.Studenten.Single(s => s.Id == 1);
            Assert.Equal("Jan", editStudent.StudentNaam);
            editStudent.StudentNaam = "Nepnaam";
            test.Edit(editStudent);
            Assert.Equal("Nepnaam", db.Studenten.Single(s => s.Id == 1).StudentNaam);
        }

        private ApplicationDbContext GetInMemoryDbWithData()
        {
            var context = GetNewInMemoryDatabase(true);
            context.AddRange(new List<Student>()
            {
                new Student()
                    {Id = 1, StudentMail = "10000@student.hhs.nl", StudentNaam = "Jan", StudentNummer = 10000},
                new Student()
                    {Id = 2, StudentMail = "20000@student.hhs.nl", StudentNaam = "Kees", StudentNummer = 20000},
                new Student()
                    {Id = 3, StudentMail = "30000@student.hhs.nl", StudentNaam = "Pieter", StudentNummer = 30000},
                new Student()
                    {Id = 4, StudentMail = "40000@student.hhs.nl", StudentNaam = "Jan", StudentNummer = 40000},
                new Student()
                    {Id = 5, StudentMail = "50000@student.hhs.nl", StudentNaam = "Jeroen", StudentNummer = 50000}
            });
            context.SaveChanges();
            return GetNewInMemoryDatabase(false);
        }

        private ApplicationDbContext GetNewInMemoryDatabase(bool NewDb)
        {
            if (NewDb) databaseName = Guid.NewGuid().ToString(); // unieke naam

            var options = new DbContextOptionsBuilder<ApplicationDbContext>()
                .UseInMemoryDatabase(this.databaseName)
                .Options;

            return new ApplicationDbContext(options);
        }
    }
}

